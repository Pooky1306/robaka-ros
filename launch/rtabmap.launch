<launch>

  <!-- Realsense camera -->
  <include file="$(find realsense2_camera)/launch/rs_rgbd.launch">
    <arg name="align_depth" value="true" />
    <arg name="enable_infra1" value="false" />
    <arg name="enable_infra2" value="false" />    
    <arg name="enable_depth" value="true" />
    <arg name="color_fps" value="15" />
    <arg name="filters" value="pointcloud" />
  </include>

  <!-- Lidar. Source: git clone https://github.com/EAIBOT/ydlidar -->
  <node name="ydlidar_node"  pkg="ydlidar"  type="ydlidar_node" output="screen" respawn="false" >
    <param name="port"         type="string" value="/dev/ydlidar"/>  
    <param name="baudrate"     type="int"    value="128000"/>
    <param name="frame_id"     type="string" value="lidar"/>
    <param name="low_exposure"  type="bool"   value="false"/>
    <param name="resolution_fixed"    type="bool"   value="true"/>
    <param name="auto_reconnect"    type="bool"   value="true"/>
    <param name="reversion"    type="bool"   value="false"/>
    <param name="angle_min"    type="double" value="-180" />
    <param name="angle_max"    type="double" value="180" />
    <param name="range_min"    type="double" value="0.1" />
    <param name="range_max"    type="double" value="16.0" />
    <param name="ignore_array" type="string" value="" />
    <param name="samp_rate"    type="int"    value="9"/>
    <param name="frequency"    type="double" value="7"/>
  </node>

  <!-- IMU -->
  <node pkg="adafruit_imu" type="imu_node" name="imu_node" output="screen" />
  <include file="$(find robaka)/launch/include/imu.launch" />

  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization">
<!--    <remap from="odometry/filtered" to="odom" /> -->
    <rosparam command="load" file="$(find robaka)/conf/robot_localization.yaml" />
  </node>

  <!-- Model and state publisher -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder $(find robaka)/urdf/robaka_v2.xacro"/>
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>

  <!-- PS4 joypad -->
  <include file="$(find ds4_driver)/launch/ds4_twist.launch">
    <arg name="dof" value="2"/>
    <remap from="cmd_vel" to="joypad_teleop/cmd_vel"/>
  </include>

  <!-- Twist MUX -->
  <node pkg="twist_mux" type="twist_mux" name="twist_mux">
    <rosparam command="load" file="$(find robaka)/conf/twist_mux.yaml" />
    <remap from="cmd_vel_out" to="hoverboard_velocity_controller/cmd_vel"/>
  </node>

  <!-- GPS -->
  <node name="nmea_serial_driver_node" pkg="nmea_navsat_driver" type="nmea_serial_driver" output="screen">
    <param name="port" value="/dev/ttyACM0"/>
    <param name="baud" value="115200" />
    <param name="frame_id" value="gps" />
    <param name="use_GNSS_time" value="False" />
    <param name="time_ref_source" value="gps" />
    <param name="useRMC" value="False" />
  </node>
  
  <!-- ROS chassis control -->
  <!-- <include file="$(find hoverboard_driver)/launch/hoverboard.launch" /> -->

   <group ns="rtabmap">
    <!-- Use RGBD synchronization -->
    <!-- Here is a general example using a standalone nodelet, 
         but it is recommended to attach this nodelet to nodelet 
         manager of the camera to avoid topic serialization -->
    <node pkg="nodelet" type="nodelet" name="rgbd_sync" args="standalone rtabmap_ros/rgbd_sync" output="screen">
      <remap from="rgb/image"       to="/camera/color/image_rect_color"/>
      <remap from="depth/image"     to="/camera/aligned_depth_to_color/image_raw"/>
      <remap from="rgb/camera_info" to="/camera/color/camera_info"/>
      <param name="approx_sync"     value="false"/> 
    </node>

    <node pkg="rtabmap_ros" type="rgbd_odometry" name="rgbd_odometry" output="screen">
      <param name="subscribe_rgbd"           type="bool"   value="true"/>
      <param name="frame_id"                 type="string" value="base_link"/>
      <param name="rgbd_cameras"             type="int"    value="1"/>
    </node>
    
    <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="--delete_db_on_start">
          <param name="frame_id" type="string" value="base_link"/>

          <param name="subscribe_depth" type="bool" value="false"/>
          <param name="subscribe_rgbd" type="bool" value="true"/>
	  <param name="subscribe_rgb" type="bool" value="false"/>
          <param name="subscribe_scan" type="bool" value="true"/>
	  <param name="subscribe_odom_info" type="bool" value="true"/>

	  <param name="odom_frame_id" type="string" value="odom" />

	  <remap from="grid_map" to="/map"/>

          <remap from="odom" to="/odometry/filtered"/> 
          <remap from="scan" to="/scan"/>
          <remap from="rgbd_image" to="/rtabmap/rgbd_image"/>

          <param name="queue_size" type="int" value="10"/>

          <!-- RTAB-Map's parameters -->
          <param name="RGBD/NeighborLinkRefining" type="string" value="true"/>
          <param name="RGBD/ProximityBySpace"     type="string" value="true"/>
          <param name="RGBD/AngularUpdate"        type="string" value="0.01"/>
          <param name="RGBD/LinearUpdate"         type="string" value="0.01"/>
          <param name="RGBD/OptimizeFromGraphEnd" type="string" value="false"/>
          <param name="Grid/FromDepth"            type="string" value="false"/> <!-- occupancy grid from lidar -->
          <param name="Reg/Force3DoF"             type="string" value="true"/>
          <param name="Reg/Strategy"              type="string" value="1"/> <!-- 1=ICP -->
          
          <!-- ICP parameters -->
          <param name="Icp/VoxelSize"                 type="string" value="0.05"/>
          <param name="Icp/MaxCorrespondenceDistance" type="string" value="0.1"/>
    </node>
  </group>    
  
</launch>
